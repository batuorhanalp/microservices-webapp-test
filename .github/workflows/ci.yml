name: CI - Build, Test, and Coverage

on:
  push:
    branches: [ main, develop, feature/phase5.3-service-layer ]
  pull_request:
    branches: [ main, develop ]

env:
  DOTNET_VERSION: '8.0.x'
  MINIMUM_COVERAGE: 97.0

jobs:
  test:
    runs-on: ubuntu-latest
    name: Build and Test
    permissions:
      contents: read
      actions: read
      checks: write
      pull-requests: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore src/backend/WebApp.sln

    - name: Build solution
      run: dotnet build src/backend/WebApp.sln --no-restore --configuration Release

    - name: Run unit tests with coverage
      run: |
        dotnet test src/backend/WebApp.Tests/WebApp.Tests.csproj \
          --configuration Release \
          --no-build \
          --verbosity normal \
          --collect:"XPlat Code Coverage" \
          --results-directory ./TestResults \
          --logger trx \
          --logger "console;verbosity=detailed"

    - name: Install ReportGenerator tool
      run: dotnet tool install -g dotnet-reportgenerator-globaltool

    - name: Generate coverage report
      run: |
        reportgenerator \
          -reports:"TestResults/**/coverage.cobertura.xml" \
          -targetdir:"CoverageReport" \
          -reporttypes:"Html;TextSummary;Badges;JsonSummary" \
          -verbosity:Info

    - name: Extract coverage percentage
      id: coverage
      run: |
        COVERAGE=$(grep -oP '"linecoverage":\s*\K[0-9.]+' CoverageReport/Summary.json)
        echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
        echo "Coverage: $COVERAGE%"

    - name: Check coverage threshold
      run: |
        COVERAGE=${{ steps.coverage.outputs.coverage }}
        echo "Current coverage: $COVERAGE%"
        echo "Minimum required: ${{ env.MINIMUM_COVERAGE }}%"
        
        if (( $(echo "$COVERAGE < ${{ env.MINIMUM_COVERAGE }}" | bc -l) )); then
          echo "❌ Coverage $COVERAGE% is below minimum threshold of ${{ env.MINIMUM_COVERAGE }}%"
          exit 1
        else
          echo "✅ Coverage $COVERAGE% meets minimum threshold of ${{ env.MINIMUM_COVERAGE }}%"
        fi

    - name: Upload coverage reports to Codecov
      if: always()
      uses: codecov/codecov-action@v4
      with:
        files: ./TestResults/**/coverage.cobertura.xml
        fail_ci_if_error: false

    - name: Comment PR with coverage
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const coverage = ${{ steps.coverage.outputs.coverage }};
          const minCoverage = ${{ env.MINIMUM_COVERAGE }};
          const status = coverage >= minCoverage ? '✅' : '❌';
          const emoji = coverage >= minCoverage ? '🎉' : '⚠️';
          
          const body = `## ${emoji} Test Coverage Report

          | Metric | Value | Status |
          |--------|-------|--------|
          | **Line Coverage** | \`${coverage}%\` | ${status} |
          | **Minimum Required** | \`${minCoverage}%\` | - |
          | **Status** | ${coverage >= minCoverage ? 'PASSED' : 'FAILED'} | ${status} |

          ${coverage >= minCoverage 
            ? '✅ **Coverage requirement met!** Great job maintaining high code quality.' 
            : `❌ **Coverage below threshold!** Please add tests to reach ${minCoverage}% coverage.`}

          ### Coverage Details
          - Current coverage: **${coverage}%**
          - Required minimum: **${minCoverage}%**
          - Gap: **${coverage >= minCoverage ? '0' : (minCoverage - coverage).toFixed(1)}%**
          `;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: TestResults/*.trx

    - name: Upload coverage report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: CoverageReport/

    - name: Publish test results
      if: always()
      uses: dorny/test-reporter@v1
      with:
        name: .NET Tests
        path: TestResults/*.trx
        reporter: dotnet-trx
