apiVersion: v1
kind: Service
metadata:
  name: webapp-auth-service
  labels:
    app: webapp-production
    component: auth
    tier: backend
  annotations:
    # Prometheus monitoring
    prometheus.io/scrape: "true"
    prometheus.io/port: "9093"
    prometheus.io/path: "/metrics"
    
    # Service mesh annotations (for Istio/Linkerd)
    linkerd.io/inject: "enabled"
    
    # Cloud provider annotations
    # AWS
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-internal: "true"
    
    # Azure
    service.beta.kubernetes.io/azure-load-balancer-internal: "true"
    
    # GCP
    cloud.google.com/neg: '{"ingress": true}'
    cloud.google.com/backend-config: '{"default": "webapp-auth-backendconfig"}'
spec:
  type: ClusterIP
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 10800  # 3 hours
  ports:
  - name: http
    port: 3003
    targetPort: 3003
    protocol: TCP
  - name: metrics
    port: 9093
    targetPort: 9093
    protocol: TCP
  selector:
    app: webapp-production
    component: auth

---
# Headless Service for StatefulSet (if needed for database connections)
apiVersion: v1
kind: Service
metadata:
  name: webapp-auth-headless
  labels:
    app: webapp-production
    component: auth
    tier: backend
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - name: http
    port: 3003
    targetPort: 3003
    protocol: TCP
  selector:
    app: webapp-production
    component: auth

---
# GCP Backend Configuration
apiVersion: cloud.google.com/v1
kind: BackendConfig
metadata:
  name: webapp-auth-backendconfig
  labels:
    app: webapp-production
    component: auth
spec:
  healthCheck:
    checkIntervalSec: 10
    timeoutSec: 5
    healthyThreshold: 1
    unhealthyThreshold: 3
    type: HTTP
    requestPath: /health
    port: 3003
  sessionAffinity:
    affinityType: "CLIENT_IP"
    affinityCookieTtlSec: 10800
  timeoutSec: 30
  connectionDraining:
    drainingTimeoutSec: 60

---
# Network Policy for Auth Service
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: webapp-auth-network-policy
  labels:
    app: webapp-production
    component: auth
spec:
  podSelector:
    matchLabels:
      app: webapp-production
      component: auth
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow traffic from ingress controller
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 3003
  # Allow traffic from frontend and backend services
  - from:
    - podSelector:
        matchLabels:
          app: webapp-production
          component: frontend
    - podSelector:
        matchLabels:
          app: webapp-production
          component: backend
    - podSelector:
        matchLabels:
          app: webapp-production
          component: websocket
    ports:
    - protocol: TCP
      port: 3003
  # Allow monitoring traffic
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 9093
  egress:
  # Allow DNS resolution
  - to: []
    ports:
    - protocol: UDP
      port: 53
  # Allow database connections
  - to:
    - namespaceSelector:
        matchLabels:
          name: database
    ports:
    - protocol: TCP
      port: 5432
  # Allow Redis connections
  - to:
    - namespaceSelector:
        matchLabels:
          name: cache
    ports:
    - protocol: TCP
      port: 6379
  # Allow external API calls (OAuth, email)
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 587
    - protocol: TCP
      port: 25

---
# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: webapp-auth-pdb
  labels:
    app: webapp-production
    component: auth
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: webapp-production
      component: auth

---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: webapp-auth-hpa
  labels:
    app: webapp-production
    component: auth
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: webapp-auth-deployment
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: http_requests_per_second
      target:
        type: AverageValue
        averageValue: "100"
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max
